.env
  PORT=3000
  MONGODB_URI=mongodb+srv://dbUser:dbUserPassword@cluster0.f3iezpf.mongodb.net/db-contacts?retryWrites=true&w=majority
  
.gitignore
app.js
  const express = require("express");
  const cors = require("cors");
  const connectDB = require("./config/db");
  require("dotenv").config();
  
  const app = express();
  
  app.use(express.json());
  app.use(cors());
  
  const routerApi = require("./routes/contacts");
  app.use("/api/contacts", routerApi);
  
  const errorHandler = require("./middlewares/errorHandler");
  app.use(errorHandler);
  
  app.use((_, res) => {
    res.status(404).json({
      status: "error",
      code: 404,
      message: "Use api on routes: /api/contacts",
      data: "Not found",
    });
  });
  
  app.use((err, _, res, __) => {
    console.log(err.stack);
    res.status(500).json({
      status: "fail",
      code: 500,
      message: err.message,
      data: "Internal Server Error",
    });
  });
  
  const PORT = process.env.PORT || 3000;
  connectDB().then(() => {
    app.listen(PORT, () => {
      console.log(`Server running. Use our API on port: ${PORT}`);
    });
  });
  
config/
  db.js
    const mongoose = require("mongoose");
    const dotenv = require("dotenv");
    
    dotenv.config();
    
    const connectDB = async () => {
      try {
        await mongoose.connect(process.env.MONGODB_URI, {
          useNewUrlParser: true,
          useUnifiedTopology: true,
        });
        console.log("Database connection successful");
      } catch (err) {
        console.error("Database connection error:", err.message);
        process.exit(1);
      }
    };
    
    module.exports = connectDB;
    
controllers/
  contactsControllers.js
    const {
      listContacts,
      getContactById,
      removeContact,
      addContact,
      updateContact,
    } = require("../services/contactsServices");
    const { createError } = require("../helpers/HttpError");
    const mongoose = require("mongoose");
    
    const getAllContacts = async (req, res, next) => {
      try {
        const contacts = await listContacts();
        res.status(200).json(contacts);
      } catch (error) {
        next(error);
      }
    };
    
    const getContact = async (req, res, next) => {
      try {
        const { id } = req.params;
        if (!mongoose.Types.ObjectId.isValid(id)) {
          throw createError(400, "Invalid ID format");
        }
        const contact = await getContactById(id);
        if (!contact) {
          throw createError(404, "Not found");
        }
        res.status(200).json(contact);
      } catch (error) {
        next(error);
      }
    };
    
    const createContact = async (req, res, next) => {
      try {
        const { name, email, phone } = req.body;
        const newContact = await addContact(name, email, phone);
        res.status(201).json(newContact);
      } catch (error) {
        next(error);
      }
    };
    
    const deleteContact = async (req, res, next) => {
      try {
        const { id } = req.params;
        if (!mongoose.Types.ObjectId.isValid(id)) {
          throw createError(400, "Invalid ID format");
        }
        const contact = await removeContact(id);
        if (!contact) {
          throw createError(404, "Not found");
        }
        res.status(200).json(contact);
      } catch (error) {
        next(error);
      }
    };
    
    const updateContactInfo = async (req, res, next) => {
      try {
        const { id } = req.params;
        if (!mongoose.Types.ObjectId.isValid(id)) {
          throw createError(400, "Invalid ID format");
        }
        const contact = await updateContact(id, req.body);
        if (!contact) {
          throw createError(404, "Not found");
        }
        res.status(200).json(contact);
      } catch (error) {
        next(error);
      }
    };
    
    const updateContactFavorite = async (req, res, next) => {
      try {
        const { id } = req.params;
        if (!mongoose.Types.ObjectId.isValid(id)) {
          throw createError(400, "Invalid ID format");
        }
        const { favorite } = req.body;
        const contact = await updateContact(id, { favorite });
        if (!contact) {
          throw createError(404, "Not found");
        }
        res.status(200).json(contact);
      } catch (error) {
        next(error);
      }
    };
    
    module.exports = {
      getAllContacts,
      getContact,
      createContact,
      deleteContact,
      updateContactInfo,
      updateContactFavorite,
    };
    
db/
helpers/
  HttpError.js
    class HttpError extends Error {
      constructor(status, message) {
        super(message);
        this.status = status;
      }
    }
    
    const createError = (status, message) => new HttpError(status, message);
    
    module.exports = {
      HttpError,
      createError,
    };
    
  validateBody.js
    const validateBody = (schema) => {
      return (req, res, next) => {
        const { error } = schema.validate(req.body);
        if (error) {
          const message = error.details[0].message;
          res.status(400).json({ message });
          return;
        }
        next();
      };
    };
    
    module.exports = validateBody;
    
middlewares/
  errorHandler.js
    const errorHandler = (err, req, res, next) => {
      console.error(err.stack);
      res.status(err.status || 500).json({
        status: "fail",
        code: err.status || 500,
        message: err.message,
        data: "Internal Server Error",
      });
    };
    
    module.exports = errorHandler;
    
routes/
  contacts.js
    const express = require("express");
    const router = express.Router();
    const {
      getAllContacts,
      getContact,
      createContact,
      deleteContact,
      updateContactInfo,
      updateContactFavorite,
    } = require("../controllers/contactsControllers");
    const {
      contactSchema,
      updateContactSchema,
      updateFavoriteSchema,
    } = require("../schemas/contactsSchemas");
    const validateBody = require("../helpers/validateBody");
    
    router.get("/", getAllContacts);
    router.get("/:id", getContact);
    router.post("/", validateBody(contactSchema), createContact);
    router.delete("/:id", deleteContact);
    router.put("/:id", validateBody(updateContactSchema), updateContactInfo);
    router.patch(
      "/:id/favorite",
      validateBody(updateFavoriteSchema),
      updateContactFavorite,
    );
    
    module.exports = router;
    
schemas/
  contactModel.js
    const mongoose = require("mongoose");
    const Schema = mongoose.Schema;
    
    const contactSchema = new Schema({
      name: {
        type: String,
        required: [true, "Set name for contact"],
      },
      email: {
        type: String,
      },
      phone: {
        type: String,
      },
      favorite: {
        type: Boolean,
        default: false,
      },
    });
    
    const Contact = mongoose.model("Contact", contactSchema);
    
    module.exports = Contact;
    
  contactsSchemas.js
    const Joi = require("joi");
    
    const contactSchema = Joi.object({
      name: Joi.string().required(),
      email: Joi.string().email().required(),
      phone: Joi.string().required(),
    });
    
    const updateContactSchema = Joi.object({
      name: Joi.string(),
      email: Joi.string().email(),
      phone: Joi.string(),
    }).or("name", "email", "phone");
    
    const updateFavoriteSchema = Joi.object({
      favorite: Joi.boolean().required(),
    });
    
    module.exports = {
      contactSchema,
      updateContactSchema,
      updateFavoriteSchema,
    };
    
services/
  contactsServices.js
    const Contact = require("../schemas/contactModel");
    
    async function listContacts() {
      return await Contact.find({});
    }
    
    async function getContactById(contactId) {
      return await Contact.findById(contactId);
    }
    
    async function removeContact(contactId) {
      const contact = await Contact.findByIdAndDelete(contactId); // Замінили findByIdAndRemove на findByIdAndDelete
      return contact;
    }
    
    async function addContact(name, email, phone) {
      const newContact = new Contact({ name, email, phone });
      await newContact.save();
      return newContact;
    }
    
    async function updateContact(id, body) {
      const contact = await Contact.findByIdAndUpdate(id, body, { new: true });
      return contact;
    }
    
    module.exports = {
      listContacts,
      getContactById,
      removeContact,
      addContact,
      updateContact,
    };
    
